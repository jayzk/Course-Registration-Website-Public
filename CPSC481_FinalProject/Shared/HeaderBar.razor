@inject NavigationManager NavigationManager
@using System.Web
@inject ICourseState courseState
@inject ITermState termState
@inject IToastService toastService

<div class="container-fluid">
    <!-- left side of header bar-->
   
    <div class="flex-display">
        <NavLink href ="/">
            <div class="navbar-brand flex-display">

                <a>
                        <img src="CoursEZLogo.png" width="55" height="65">
                </a>
                <h2>
                        <div class="flex-horizontal" style=" color: #FFF">
                            Cours
                        </div>
                        <div class ="flex-horizontal" style = " color: #0098ff">
                            EZ
                        </div>
                </h2>
            </div>
        </NavLink>
        <div class="dropdown">
            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenuButton1" data-bs-toggle="dropdown" aria-expanded="false">
               Term: @termState.getTermState()
            </button>
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton1">
                <li>
                    @if(termState.getTermState() != "Winter 2023"){           
                        string termW = "Winter 2023";          
                        <a class="dropdown-item" @onclick="() => SavePotentialNewTerm(termW)" data-bs-toggle="modal" data-bs-target="#termModal"> @termW</a>
                    }
                </li>
                <li>   
                    @if(termState.getTermState() != "Fall 2023"){
                        string termF = "Fall 2023";                             
                        <a class="dropdown-item" @onclick="() => SavePotentialNewTerm(termF)" data-bs-toggle="modal" data-bs-target="#termModal"> @termF</a>
                    } 
                </li>
           </ul>
        </div>
        <div class="enrollment-date-text">
            Enrollement Dates <br>
            Winter 2023: In-Progress <br>
            Fall 2023: May 7th 10:30am
        </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="termModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal" tabindex="-1" role="dialog"></div>
            <div class="modal-content">
                <div class="modal-header">
                    <!--<FONT COLOR=red>--><h5 class="modal-title " id="exampleModalLabel">Warning</h5> <!--</FONT>-->
                    <button type="button " class="btn-close " data-bs-dismiss="modal" aria-label="Close" ></button>
                </div>

                <div class="modal-body">
                    <div class="flex-container">
                            <label class="form-check-label" for="flexCheckDefault">
                                Any unsaved courses will be lost upon changing terms. Courses can be saved by enrolling/waitlisting, bookmarking, or saving in schedule.
                            </label>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SaveNewTerm">Continue</button>
                </div>
            </div>
        </div>
    </div>


    <!-- right side of header bar -->
    <nav class="flex-column">
        @if(currentPage.ToString() == "CPSC481_FinalProject.Pages.AdvancedPage"){
            <NavLink href="guided">
                <button type="button" class="btn btn-warning mx-3">
                    To Guided Mode
                </button>
            </NavLink>
        }
        else if (currentPage.ToString() == "CPSC481_FinalProject.Pages.GuidedPage"  ||
                 currentPage.ToString() == "CPSC481_FinalProject.Pages.GuidedPage2" ||
                 currentPage.ToString() == "CPSC481_FinalProject.Pages.GuidedPage3"){
            <NavLink href="advanced">
                <button type="button" class="btn btn-warning mx-3">
                    To Advanced Mode
                </button>
            </NavLink>
        }
        @*@if (currentPage.ToString() == "CPSC481_FinalProject.Pages.AdvancedPage" ||
          currentPage.ToString() == "CPSC481_FinalProject.Pages.GuidedPage" ||
          currentPage.ToString() == "CPSC481_FinalProject.Pages.GuidedPage2" ||
          currentPage.ToString() == "CPSC481_FinalProject.Pages.GuidedPage3")
        {
            <button type="button" class="btn btn-warning mx-3" data-bs-toggle="modal" data-bs-target="#helpModal" >
                Help
        </button>
        }

        <!-- Modal -->
        <div class="modal fade" id="helpModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal" tabindex="-1" role="dialog"></div>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title " id="exampleModalLabel">Help</h5>
                        <button type="button " class="btn-close " data-bs-dismiss="modal" aria-label="Close" ></button>
                    </div>

                    <div class="modal-body">
                        <div class="flex-container">
                                <label class="form-check-label" for="flexCheckDefault">
                                    - Advanced Search allows you to specify certain search details
                                </label>
                                <label class="form-check-label" for="flexCheckDefault">
                                    - Bookmarked courses saves courses to view later, click a course to load it up. 
                                </label>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>*@



        <!-- Button trigger modal -->
        <button type="button" class="btn btn-primary"  style = "margin-left:-4px" data-bs-toggle="modal" data-bs-target="#exampleModal">
        Email Notifications
        </button>

        <!-- Modal -->
        <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal" tabindex="-1" role="dialog"></div>
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Email Notification Settings</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                        <div class="flex-container">
                            <div class="form-check">
                                Recieve email notification:
                            </div>
                            <br>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                                <label class="form-check-label" for="flexSwitchCheckDefault">
                                    Upon enrollment in a waitlisted course
                                </label>
                            </div>
                            <br>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                                <label class="form-check-label" for="flexSwitchCheckDefault">
                                    To confirm enrolling, dropping or waitlisting a course
                                </label>
                            </div>
                            <br>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                                <label class="form-check-label" for="flexSwitchCheckDefault">
                                    Upon change in course location or professor teaching
                                </label>
                            </div>
                            <br>
                            <div class="form-check form-switch">
                                <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                                <label class="form-check-label" for="flexSwitchCheckDefault">
                                    Reminder for upcoming enrollment dates, and upon arrival of enrollement date
                                </label>
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal" @onclick="SaveEmailNotif">Save changes</button>
                    </div>
                </div>
            </div>
        </div>  
    </nav>
</div>

<header>

</header>

@code {
    [Parameter]
    public Type? currentPage { get; set; }

    private string? potentialNewTerm;

    protected override void OnInitialized()
    {
        termState.setTermState("Winter 2023");
    }

    protected override void OnParametersSet(){
        Console.WriteLine("current page: " + currentPage);
    }

    public void SavePotentialNewTerm(string selectedTerm){
        potentialNewTerm = selectedTerm;
    }

    public void SaveNewTerm(){
        courseState.ForceUpdate();
        termState.setTermState(potentialNewTerm);

        if (courseState.isDefault)
            courseState.ClearSelectedCourses();
        else
            courseState.DefaultSelectedCourses();
    }

    private void SaveEmailNotif()
    {
        toastService.ShowSuccess("Updated Email Notification Preferences");
    }

    /*public abstract Microsoft.AspNetCore.Http.IRequestCookieCollection Cookies { get; set; }

    public void ReadCookie(){
        Microsoft.AspNetCore.HttpResponse.cookies.Append("darkTheme", "yes");
    }*/
    
}
